/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        val generatedNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        println("I have generated a $digitsToGuess-digit number where each digit is unique. Try to guess it!")
        while (true) {
            println("Please enter your $digitsToGuess-digit guess:")
            val number = readlnOrNull()?.toIntOrNull()

            if (number != null && number.toString().length == digitsToGuess) {
                val result = checkUserInputAgainstGeneratedNumber(number, generatedNumber)
                println("You matched ${result.m} digit(s) exactly in the correct position.")
                println("You guessed ${result.n} correct digit(s) but in the wrong position.")

                if (result.m == digitsToGuess) {
                    println("Congratulations, you've guessed all digits correctly and in the correct order! You've won the game!")
                    break
                } else {
                    println("Not quite right. Keep trying!")
                }
            } else {
                println("Invalid input. Make sure you enter a $digitsToGuess-digit number with unique digits.")
            }
        }
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        if (length < 1 || length > 9) throw IllegalArgumentException("Length must be between 1 and 9.")
        val digits = (1..9).shuffled().take(length).joinToString("")
        digits.toInt()
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        val inputString = input.toString()
        val generatedString = generatedNumber.toString()
        if (inputString.length != generatedString.length) throw IllegalArgumentException("Input and generated number must have the same length.")
        val uniqueDigits = inputString.toSet()
        val n = uniqueDigits.count { it in generatedString } // correct digits regardless of position
        val m = inputString.indices.count { inputString[it] == generatedString[it] } // correct digits in correct position
        CompareResult(n, m)
    }
}

fun main() {
    println("********************************************************")
    println("       Welcome to the Number Guessing Game!")
    println("********************************************************")
    val app = App()
    println("How many digits do you want to guess? (1-9, press Enter for default):")
    val input = readlnOrNull()

    if(input.isNullOrEmpty()) {
        println("Starting game with the default of 4 digits...")
        app.playNumberGame()
    } else {
        val digits = input.toInt()
        println("Starting game with $digits digit(s)...")
        app.playNumberGame(digits)
    }
}